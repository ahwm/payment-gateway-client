using PaymentGateway.Attributes;
using System;
using System.Collections.Generic;

namespace PaymentGateway.Models
{
    /// <summary>
    /// 
    /// </summary>
    public class Sale
    {
        [ParameterName("type")]
        internal static string Type => "sale";

        /// <summary>
        /// 
        /// </summary>
        public string FirstName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string LastName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string City { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string State { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Zip { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Country { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Phone { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Fax { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("social_security_number")]
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_firstname")]
        public string ShippingFirstName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_lastname")]
        public string ShippingLastName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_company")]
        public string ShippingCompany { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_address1")]
        public string ShippingAddress1 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_address2")]
        public string ShippingAddress2 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_city")]
        public string ShippingCity { get; set; }

        /// <summary>
        /// Format: CC
        /// </summary>
        [ParameterName("shipping_state")]
        public string ShippingState { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_zip")]
        public string ShippingZip { get; set; }

        /// <summary>
        /// Country codes are as shown in ISO 3166. Format: CC
        /// </summary>
        [ParameterName("shipping_country")]
        public string ShippingCountry { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_email")]
        public string ShippingEmail { get; set; }

        /// <summary>
        /// The tokenized version of the customer's card or check information. This will be generated by Collect.js and is usable only once.
        /// </summary>
        [ParameterName("payment_token")]
        public string PaymentToken { get; set; }

        /// <summary>
        /// The encrypted token created when integration directly to the Google Pay SDK.
        /// </summary>
        [ParameterName("googlepay_payment_data")]
        public string GooglePayPaymentData { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("ccnumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("ccexp")]
        public string CardExpiration { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string CVV { get; set; }

        /// <summary>
        /// Name on the customer's ACH account
        /// </summary>
        public string CheckName { get; set; }

        /// <summary>
        /// Customer's bank routing number
        /// </summary>
        public string CheckABA { get; set; }

        /// <summary>
        /// Customer's bank account number
        /// </summary>
        public string CheckAccount { get; set; }

        /// <summary>
        /// The type of ACH account the customer has ("business" or "personal")
        /// </summary>
        [ParameterName("account_holder_type")]
        public string AccountHolderType { get; set; }

        /// <summary>
        /// The ACH account entity of the customer ("checking" or "savings")
        /// </summary>
        [ParameterName("account_type")]
        public string AccountType { get; set; }

        /// <summary>
        /// The Standard Entry Class code of the ACH transaction ("PPD", "WEB", "TEL", or "CCD")
        /// </summary>
        [ParameterName("sec_code")]
        public string StandardEntryClass { get; set; }

        /// <summary>
        /// Format: x.xx
        /// </summary>
        public string Amount { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string OrderId { get; set; }

        /// <summary>
        /// Format: x.xx
        /// </summary>
        public string Surcharge { get; set; }

        /// <summary>
        /// <para>How much less a customer paid due to a cash discount</para>
        /// <para>Format: x.xx, only applicable to cash and check transactions</para>
        /// </summary>
        [ParameterName("cash_discount")]
        public string CashDiscount { get; set; }

        /// <summary>
        /// The transaction currency. Format: ISO 4217 (USD, CAD, etc)
        /// </summary>
        public string Currency { get; set; }

        /// <summary>
        /// Type of payment ("creditcard", "check", "cash")
        /// </summary>
        public string Payment { get; set; } = "creditcard";

        /// <summary>
        /// If using Multiple MIDs, route to this processor (processor_id is obtained under Settings → Transaction Routing in the Control Panel).
        /// </summary>
        [ParameterName("processor_id")]
        public string ProcessorId { get; set; }

        /// <summary>
        /// Set to "enabled" <em>and</em> use the test credit card account information in the provider's documentation to test a one-off transaction. 
        /// </summary>
        [ParameterName("test_mode")]
        public string TestMode { get; set; } = "";

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("ip_address")]
        public string IPAddress { get; set; }

        /// <summary>
        /// Can be set up in merchant control panel under 'Settings'->'Merchant Defined Fields'.
        /// </summary>
        [StringListParameter("merchant_defined_field_#")]
        public List<string> MerchantDefinedFields { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ObjectListParameter]
        public List<InvoiceProduct> Products { get; set; }

        /// <summary>
        /// <para>If set to true, when the customer is charged, they will be sent a transaction receipt.</para>
        /// <para>Values: 'true' or 'false'</para>
        /// </summary>
        [ParameterName("customer_receipt")]
        public string CustomerReceipt { get; set; }

        /// <summary>
        /// <para>Cardholder signature image. For use with "sale" and "auth" actions only.</para>
        /// <para>Format: base64 encoded raw PNG image. (16kiB maximum)</para>
        /// </summary>
        [ParameterName("signature_image")]
        public string SignatureImage { get; set; }

        /// <summary>
        /// <para>Set 3D Secure condition. Value used to determine E-commerce indicator (ECI).</para>
        /// <para>Values: 'verified' or 'attempted'</para>
        /// </summary>
        [ParameterName("cardholder_auth")]
        public string CardholderAuth { get; set; }

        /// <summary>
        /// <para>3DSecure version.</para>
        /// <para>Examples: "2.0.0" or "2.2.0"</para>
        /// </summary>
        [ParameterName("three_ds_version")]
        public string ThreeDSVersion { get; set; }

        /// <summary>
        /// <para>Directory Server Transaction ID. May be provided as part of 3DSecure 2.0 authentication.</para>
        /// <para>Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para>
        /// </summary>
        [ParameterName("directory_service_id")]
        public string DirectoryServerId { get; set; }

        /// <summary>
        /// Set to 'Y' if you have Pinless Debit Conversion enabled but want to opt out for this transaction. Feature applies to selected processors only.
        /// </summary>
        [ParameterName("pinless_debit_override")]
        public string PinlessDebitOverride { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class Authorize : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "auth";
    }

    /// <summary>
    /// 
    /// </summary>
    public class Credit : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "credit";
    }

    /// <summary>
    /// 
    /// </summary>
    public class Validate : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "validate";
    }

    /// <summary>
    /// 
    /// </summary>
    public class Offline : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "offline";

        /// <summary>
        /// Specify authorization code. For use with "offline" action only.
        /// </summary>
        [ParameterName("authorization_code")]
        public string AuthorizationCode { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class Capture
    {
        internal static string Type => "capture";

        /// <summary>
        /// Original payment gateway transaction id
        /// </summary>
        public string TransactionId { get; set; }

        /// <summary>
        /// <para>Total amount to be settled. This amount must be equal to or less than the original authorized amount.</para>
        /// <para>Format: x.xx</para>
        /// </summary>
        public string Amount { get; set; }

        /// <summary>
        /// Shipping tracking number
        /// </summary>
        [ParameterName("tracking_number")]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Order id.
        /// </summary>
        public string OrderId { get; set; }

        /// <summary>
        /// <para>Shipping carrier.</para>
        /// <para>Values: 'ups', 'fedex', 'dhl', or 'usps'</para>
        /// </summary>
        [ParameterName("shipping_carrier")]
        public string ShippingCarrier { get; set; }

        /// <summary>
        /// <para>Cardholder signature image.</para>
        /// <para>Format: base64 encoded raw PNG image. (16kiB maximum)</para>
        /// </summary>
        [ParameterName("signature_image")]
        public string SignatureImage { get; set; }
    }
}

using PaymentGateway.Attributes;
using System;
using System.Collections.Generic;
using System.Text;

namespace PaymentGateway.Models
{
    /// <summary>
    /// 
    /// </summary>
    public class Sale
    {
        [ParameterName("type")]
        internal static string Type => "sale";

        /// <summary>
        /// The tokenized version of the customer's card or check information. This will be generated by Collect.js and is usable only once.
        /// </summary>
        [ParameterName("payment_token")]
        public string PaymentToken { get; set; }

        /// <summary>
        /// The encrypted token created when integration directly to the Google Pay SDK.
        /// </summary>
        [ParameterName("googlepay_payment_data")]
        public string GooglePayPaymentData { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("ccnumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("ccexp")]
        public string CardExpiration { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string CVV { get; set; }

        /// <summary>
        /// Name on the customer's ACH account
        /// </summary>
        public string CheckName { get; set; }

        /// <summary>
        /// Customer's bank routing number
        /// </summary>
        public string CheckABA { get; set; }

        /// <summary>
        /// Customer's bank account number
        /// </summary>
        public string CheckAccount { get; set; }

        /// <summary>
        /// The type of ACH account the customer has ("business" or "personal")
        /// </summary>
        [ParameterName("account_holder_type")]
        public string AccountHolderType { get; set; }

        /// <summary>
        /// The ACH account entity of the customer ("checking" or "savings")
        /// </summary>
        [ParameterName("account_type")]
        public string AccountType { get; set; }

        /// <summary>
        /// The Standard Entry Class code of the ACH transaction ("PPD", "WEB", "TEL", or "CCD")
        /// </summary>
        [ParameterName("sec_code")]
        public string StandardEntryClass { get; set; }

        /// <summary>
        /// Format: x.xx
        /// </summary>
        public string Amount { get; set; }

        /// <summary>
        /// Format: x.xx
        /// </summary>
        public string Surcharge { get; set; }

        /// <summary>
        /// <para>How much less a customer paid due to a cash discount</para>
        /// <para>Format: x.xx, only applicable to cash and check transactions</para>
        /// </summary>
        [ParameterName("cash_discount")]
        public string CashDiscount { get; set; }

        /// <summary>
        /// The transaction currency. Format: ISO 4217 (USD, CAD, etc)
        /// </summary>
        public string Currency { get; set; }

        /// <summary>
        /// Type of payment ("creditcard", "check", "cash")
        /// </summary>
        public string Payment { get; set; } = "creditcard";

        /// <summary>
        /// If using Multiple MIDs, route to this processor (processor_id is obtained under Settings → Transaction Routing in the Control Panel).
        /// </summary>
        [ParameterName("processor_id")]
        public string ProcessorId { get; set; }

        /// <summary>
        /// Specify authorization code. For use with "offline" action only.
        /// </summary>
        [ParameterName("authorization_code")]
        public string AuthorizationCode { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class Authorize : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "auth";
    }

    /// <summary>
    /// 
    /// </summary>
    public class Credit : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "credit";
    }

    /// <summary>
    /// 
    /// </summary>
    public class Validate : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "validate";
    }

    /// <summary>
    /// 
    /// </summary>
    public class Offline : Sale
    {
        [ParameterName("type")]
        new internal static string Type => "offline";
    }

    public class Capture
    {
        internal static string Type => "capture";

        /// <summary>
        /// Original payment gateway transaction id
        /// </summary>
        public string TransactionId { get; set; }

        /// <summary>
        /// <para>Total amount to be settled. This amount must be equal to or less than the original authorized amount.</para>
        /// <para>Format: x.xx</para>
        /// </summary>
        public string Amount { get; set; }

        /// <summary>
        /// Shipping tracking number
        /// </summary>
        [ParameterName("tracking_number")]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Order id.
        /// </summary>
        public string OrderId { get; set; }

        /// <summary>
        /// <para>Shipping carrier.</para>
        /// <para>Values: 'ups', 'fedex', 'dhl', or 'usps'</para>
        /// </summary>
        [ParameterName("shipping_carrier")]
        public string ShippingCarrier { get; set; }

        /// <summary>
        /// <para>Cardholder signature image.</para>
        /// <para>Format: base64 encoded raw PNG image. (16kiB maximum)</para>
        /// </summary>
        [ParameterName("signature_image")]
        public string SignatureImage { get; set; }
    }
}

using PaymentGateway.Attributes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PaymentGateway.Models
{
    /// <summary>
    /// 
    /// </summary>
    public class AddCustomer
    {
        [ParameterName("customer_vault")]
        internal static string Type => "add_customer";

        /// <summary>
        /// Specifies a Customer Vault id. If not set, the payment gateway will randomly generate a Customer Vault id.
        /// </summary>
        [ParameterName("customer_vault_id")]
        public string CustomerVaultId { get; set; }

        /// <summary>
        /// Billing id to be assigned or updated. If none is provided, one will be created or the billing id with priority '1' will be updated.
        /// </summary>
        [ParameterName("billing_id")]
        public string BillingId { get; set; }

        /// <summary>
        /// The tokenized version of the customer's card or check information. This will be generated by Collect.js and is usable only once.
        /// </summary>
        [ParameterName("payment_token")]
        public string PaymentToken { get; set; }

        /// <summary>
        /// The encrypted token created when integration directly to the Google Pay SDK.
        /// </summary>
        [ParameterName("googlepay_payment_data")]
        public string GooglePayPaymentData { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("ccnumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("ccexp")]
        public string CardExpiration { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string CVV { get; set; }

        /// <summary>
        /// Name on the customer's ACH account
        /// </summary>
        public string CheckName { get; set; }

        /// <summary>
        /// Customer's bank routing number
        /// </summary>
        public string CheckABA { get; set; }

        /// <summary>
        /// Customer's bank account number
        /// </summary>
        public string CheckAccount { get; set; }

        /// <summary>
        /// The type of ACH account the customer has ("business" or "personal")
        /// </summary>
        [ParameterName("account_holder_type")]
        public string AccountHolderType { get; set; }

        /// <summary>
        /// The ACH account entity of the customer ("checking" or "savings")
        /// </summary>
        [ParameterName("account_type")]
        public string AccountType { get; set; }

        /// <summary>
        /// The Standard Entry Class code of the ACH transaction ("PPD", "WEB", "TEL", or "CCD")
        /// </summary>
        [ParameterName("sec_code")]
        public string StandardEntryClass { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Currency { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Payment { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string OrderId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("order_description")]
        public string OrderDescription { get; set; }

        /// <summary>
        /// Can be set up in merchant control panel under 'Settings'->'Merchant Defined Fields'.
        /// </summary>
        [StringListParameter("merchant_defined_field_#")]
        public List<string> MerchantDefinedFields { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("first_name")]
        public string FirstName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("last_name")]
        public string LastName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string City { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string State { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Zip { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Country { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Phone { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Company { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Fax { get; set; }

        /// <summary>
        /// Shipping entry id. If none is provided, one will be created or the billing id with priority '1' will be updated.
        /// </summary>
        [ParameterName("shipping_id")]
        public string ShippingId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_first_name")]
        public string ShippingFirstName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_last_name")]
        public string ShippingLastName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_company")]
        public string ShippingCompany { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_address1")]
        public string ShippingAddress1 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_address2")]
        public string ShippingAddress2 { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_city")]
        public string ShippigCity { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_state")]
        public string ShippingState { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_zip")]
        public string ShippingZip { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_country")]
        public string ShippingCountry { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("shipping_email")]
        public string ShippingEmail { get; set; }

        /// <summary>
        /// Specifies a payment gateway transaction id in order to associate payment information with a Customer Vault record.
        /// </summary>
        [ParameterName("source_transaction_id")]
        public string SourceTransactionId { get; set; }

        /// <summary>
        /// If set to true, credit card will be evaluated and sent based upon Automatic Card Updater settings. If set to false, credit card will not be submitted for updates when Automatic Card Updater runs.
        /// </summary>
        [ParameterName("acu_enabled")]
        public string ACUEnabled { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class UpdateCustomer : AddCustomer
    {
        [ParameterName("customer_vault")]
        internal static new string Type => "update_customer";
    }

    /// <summary>
    /// 
    /// </summary>
    public class DeleteCustomer
    {
        [ParameterName("customer_vault")]
        internal static string Type => "delete_customer";

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("customer_vault_id")]
        public string CustomerVaultId { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class CustomerSale : Sale
    {
        /// <summary>
        /// 
        /// </summary>
        [ParameterName("customer_vault_id")]
        public string CustomerVaultId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public string Descriptor { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("descriptor_phone")]
        public string DescriptorPhone { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("order_description")]
        public string OrderDescription { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("order_id")]
        public string OrderId { get; set; }

        /// <summary>
        /// Who initiated the transaction. Values: 'customer' or 'merchant'
        /// </summary>
        [ParameterName("initiated_by")]
        public string InitiatedBy { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [ParameterName("initial_transaction_id")]
        public string InitialTransactionId { get; set; }

        /// <summary>
        /// <para>The indicator of the stored credential.</para>
        /// <para>Values: 'stored' or 'used'</para>
        /// <para>Use 'stored' when processing the initial transaction in which you are storing a customer's payment details (customer credentials) in the Customer Vault or other third-party payment storage system.</para>
        /// <para>Use 'used' when processing a subsequent or follow-up transaction using the customer payment details (customer credentials) you have already stored to the Customer Vault or third-party payment storage method.</para>
        /// </summary>
        [ParameterName("stored_credential_indicator")]
        public string StoredCredentialIndicator { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class CustomerAuth : CustomerSale
    {
        internal static new string Type => "auth";
    }

    /// <summary>
    /// 
    /// </summary>
    public class CustomerCredit : CustomerSale
    {
        internal static new string Type => "credit";
    }

    /// <summary>
    /// 
    /// </summary>
    public class CustomerOffline : CustomerSale
    {
        internal static new string Type => "auth";
    }
}
